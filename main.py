import asyncio
import html
import json
import logging
import re
import xml.etree.ElementTree as ET
from datetime import datetime, timedelta, UTC
from decimal import Decimal, getcontext, InvalidOperation
from pathlib import Path

import aiohttp
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandStart
from aiogram.types import (
    Message,
    InlineQuery,
    InlineQueryResultArticle,
    InputTextMessageContent,
)

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
# ‚ùóÔ∏è –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç @BotFather
BOT_TOKEN = "8347945229:AAGJTTAV3sJTk2HOq_kfqazwI_MjB9UDbkU"
# ‚ùóÔ∏è –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ –≤–∞—à Telegram User ID, —á—Ç–æ–±—ã –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–æ–º–∞–Ω–¥–µ /stats
ADMIN_ID = 7692185941  # –ó–∞–º–µ–Ω–∏—Ç–µ 0 –Ω–∞ –≤–∞—à ID

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
getcontext().prec = 18

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# --- –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ---
STATS_FILE = Path("bot_stats.json")

# --- API Endpoints & URLs ---
CBR_API_URL = "https://www.cbr.ru/scripts/XML_daily.asp"  # API –¶–µ–Ω—Ç—Ä–æ–±–∞–Ω–∫–∞ –†–§
BINANCE_API_URL = "https://api.binance.com/api/v3/ticker/price?symbol={}"

# --- –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π ---
TICKER_MAP = {
    # –î–ª—è CBR, —ç—Ç–∏ –∫–ª—é—á–∏ –±—É–¥—É—Ç —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω—ã —Å CharCode –≤ XML
    "ur": "USD",
    "cr": "CNY",
    "er": "EUR",
    # eu –±—É–¥–µ—Ç –≤—ã—á–∏—Å–ª–µ–Ω
    # –î–ª—è Binance
    "bnc": "BTCUSDT",
    "eth": "ETHUSDT",
}


# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π ---

def load_stats() -> dict:
    if not STATS_FILE.exists():
        return {"total_requests": 0, "daily_requests": {}, "users": {}}
    try:
        with open(STATS_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except (json.JSONDecodeError, IOError):
        return {"total_requests": 0, "daily_requests": {}, "users": {}}


def save_stats(data: dict):
    try:
        with open(STATS_FILE, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=4, ensure_ascii=False)
    except IOError as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {e}")


async def update_stats(user_id: int):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –∏—Å–ø–æ–ª—å–∑—É—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤ UTC."""
    stats = load_stats()
    today = datetime.now(UTC).strftime('%Y-%m-%d')
    stats['total_requests'] = stats.get('total_requests', 0) + 1
    daily_counts = stats.get('daily_requests', {})
    daily_counts[today] = daily_counts.get(today, 0) + 1
    stats['daily_requests'] = daily_counts
    stats['users'][str(user_id)] = datetime.now(UTC).isoformat()
    save_stats(stats)


# --- –õ–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö ---

async def fetch_cbr_prices(session: aiohttp.ClientSession) -> dict[str, Decimal]:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –∏ –ø–∞—Ä—Å–∏—Ç –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç —Å API –¶–µ–Ω—Ç—Ä–æ–±–∞–Ω–∫–∞ –†–§."""
    prices = {}
    try:
        async with session.get(CBR_API_URL) as response:
            response.raise_for_status()
            text = await response.text()
            root = ET.fromstring(text)

            valute_map = {"USD": "ur", "CNY": "cr", "EUR": "er"}

            for valute in root.findall('Valute'):
                char_code = valute.find('CharCode').text
                if char_code in valute_map:
                    value_str = valute.find('Value').text.replace(',', '.')
                    nominal = valute.find('Nominal').text
                    price = Decimal(value_str) / Decimal(nominal)
                    prices[valute_map[char_code]] = price
        return prices
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å CBR API: {e}")
        return {}


async def get_binance_price(session: aiohttp.ClientSession, ticker: str) -> Decimal | None:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ü–µ–Ω—É —Å Binance."""
    try:
        async with session.get(BINANCE_API_URL.format(ticker)) as response:
            response.raise_for_status()
            data = await response.json()
            return Decimal(data['price'])
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å Binance –¥–ª—è {ticker}: {e}")
        return None


async def fetch_all_prices() -> dict[str, Decimal]:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫—É—Ä—Å—ã —Å CBR –∏ Binance.
    """
    all_prices = {}
    async with aiohttp.ClientSession() as session:
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        cbr_task = fetch_cbr_prices(session)
        bnc_task = get_binance_price(session, TICKER_MAP['bnc'])
        eth_task = get_binance_price(session, TICKER_MAP['eth'])

        results = await asyncio.gather(cbr_task, bnc_task, eth_task)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        cbr_prices, bnc_price, eth_price = results

        if cbr_prices:
            all_prices.update(cbr_prices)
        if bnc_price:
            all_prices['bnc'] = bnc_price
        if eth_price:
            all_prices['eth'] = eth_price

    # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã
    if 'er' in all_prices and 'ur' in all_prices:
        all_prices['eu'] = all_prices['er'] / all_prices['ur']
    if 'bnc' in all_prices and 'ur' in all_prices:
        all_prices['ob'] = all_prices['bnc'] * all_prices['ur']
    if 'eth' in all_prices and 'ur' in all_prices:
        all_prices['oe'] = all_prices['eth'] * all_prices['ur']

    return all_prices


# --- –õ–æ–≥–∏–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---

async def evaluate_expression(expression: str) -> str:
    original_expression = expression
    try:
        prices = await fetch_all_prices()
        if not prices:
            return "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫—É—Ä—Å—ã."

        for key in sorted(prices.keys(), key=len, reverse=True):
            expression = re.sub(r'\b' + key + r'\b', str(prices[key]), expression)

        expression = re.sub(r'(\(?\d[\d\.\s]*\)?)\s*\+\s*(\d+\.?\d*)\s*%', r'(\1 * (1 + \2 / 100))', expression)
        expression = re.sub(r'(\(?\d[\d\.\s]*\)?)\s*-\s*(\d+\.?\d*)\s*%', r'(\1 * (1 - \2 / 100))', expression)

        safe_pattern = re.compile(r'^[ \d\.\+\-\*\/\(\)]+$')
        if not safe_pattern.match(expression):
            return "–û—à–∏–±–∫–∞: –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã"

        result = eval(expression, {"__builtins__": {}}, {})

        if any(crypto in original_expression for crypto in ['bnc', 'eth', 'ob', 'oe']):
            result = round(Decimal(result), 8)
        else:
            result = round(Decimal(result), 2)

        return f'{result:,}'.replace(',', ' ').replace('.', ',')

    except (SyntaxError, NameError):
        return "–û—à–∏–±–∫–∞ –≤ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–µ"
    except ZeroDivisionError:
        return "–û—à–∏–±–∫–∞: –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å"
    except (InvalidOperation, TypeError):
        return "–û—à–∏–±–∫–∞ –≤ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è—Ö"
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ '{original_expression}': {e}")
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

async def send_start_and_help(message: Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ —Å–ø—Ä–∞–≤–∫—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."""
    bot_user = await message.bot.get_me()
    bot_name = bot_user.username
    help_text = f"""
<b>üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –≤ –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º–µ</b>

–ù–∞—á–Ω–∏—Ç–µ –ø–µ—á–∞—Ç–∞—Ç—å –≤ –ª—é–±–æ–º —á–∞—Ç–µ –∏–º—è –±–æ—Ç–∞ (<code>@{bot_name}</code>), –∞ –∑–∞—Ç–µ–º –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ. –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—è–≤–∏—Ç—Å—è –≤–æ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–º –æ–∫–Ω–µ.

<b>–ü—Ä–∏–º–µ—Ä—ã:</b>
<code>@{bot_name} (237+78)/(66623-1000)</code>
<code>@{bot_name} ur+1.5%</code>
<code>@{bot_name} ob+4%</code>

<b>‚öñÔ∏è –°–æ–∫—Ä–∞—â–µ–Ω–∏—è:</b>
<code>ur</code> - –¶–ë –†–§ USD/RUB
<code>cr</code> - –¶–ë –†–§ CNY/RUB
<code>er</code> - –¶–ë –†–§ EUR/RUB
<code>eu</code> - EUR/USD (–∫—Ä–æ—Å—Å-–∫—É—Ä—Å)
<code>bnc</code> - Binance BTC/USDT
<code>eth</code> - Binance ETH/USDT

<b>–ü—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ:</b>
<code>ob</code> - bnc * ur (Bitcoin –≤ —Ä—É–±–ª—è—Ö)
<code>oe</code> - eth * ur (Ethereum –≤ —Ä—É–±–ª—è—Ö)

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç—Ç–æ–π —Å–ø—Ä–∞–≤–∫–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help_en
    """
    await message.answer(text=help_text, parse_mode=ParseMode.HTML)


async def send_help_en(message: Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø—Ä–∞–≤–∫—É –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ."""
    bot_user = await message.bot.get_me()
    bot_name = bot_user.username
    help_text = f"""
<b>üßÆ Inline Mode Calculator</b>

Start typing the bot's username (<code>@{bot_name}</code>) in any chat, followed by a mathematical expression. The result will appear in a pop-up window.

<b>Examples:</b>
<code>@{bot_name} (237+78)/(66623-1000)</code>
<code>@{bot_name} ur+1.5%</code>
<code>@{bot_name} ob+4%</code>

<b>‚öñÔ∏è Shortcuts:</b>
<code>ur</code> - CBR USD/RUB
<code>cr</code> - CBR CNY/RUB
<code>er</code> - CBR EUR/RUB
<code>eu</code> - EUR/USD (cross-rate)
<code>bnc</code> - Binance BTC/USDT
<code>eth</code> - Binance ETH/USDT

<b>Derivatives:</b>
<code>ob</code> - bnc * ur (Bitcoin in RUB)
<code>oe</code> - eth * ur (Ethereum in RUB)

To get this help in Russian, use /help
    """
    await message.answer(text=help_text, parse_mode=ParseMode.HTML)


async def send_stats(message: Message):
    if message.from_user.id != ADMIN_ID and ADMIN_ID != 0:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    stats = load_stats()
    now = datetime.now(UTC)

    dau = 0
    mau = 0
    if 'users' in stats:
        for last_seen_iso in stats['users'].values():
            last_seen = datetime.fromisoformat(last_seen_iso).astimezone(UTC)
            if now - last_seen <= timedelta(days=1):
                dau += 1
            if now - last_seen <= timedelta(days=30):
                mau += 1

    total_req = stats.get('total_requests', 0)
    today_req = stats.get('daily_requests', {}).get(now.strftime('%Y-%m-%d'), 0)

    stats_text = f"""
<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>

<b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (DAU):</b> {dau}
<b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (MAU):</b> {mau}

<b>–ó–∞–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è:</b> {today_req}
<b>–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤:</b> {total_req}
    """
    await message.answer(stats_text, parse_mode=ParseMode.HTML)


async def handle_other_messages(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª—é–±—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–µ —è–≤–ª—è—é—â–∏–µ—Å—è –∫–æ–º–∞–Ω–¥–∞–º–∏."""
    bot_user = await message.bot.get_me()
    bot_name = bot_user.username
    await message.answer(
        f"–Ø —Ä–∞–±–æ—Ç–∞—é –≤ –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º–µ.\n\n"
        f"–ü—Ä–æ—Å—Ç–æ –Ω–∞—á–Ω–∏—Ç–µ –ø–µ—á–∞—Ç–∞—Ç—å <code>@{bot_name}</code> –∏ –≤–∞—à–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –≤ –ª—é–±–æ–º —á–∞—Ç–µ.\n"
        f"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /help.",
        parse_mode=ParseMode.HTML
    )


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∑–∞–ø—Ä–æ—Å–æ–≤ ---

async def inline_handler(query: InlineQuery, bot: Bot):
    user_query = query.query.lower().strip()
    if not user_query:
        return

    await update_stats(query.from_user.id)

    result_text = await evaluate_expression(user_query)

    # –î–ª—è HTML –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ <, > –∏ &
    escaped_query = html.escape(query.query)
    escaped_result = html.escape(result_text)

    message_content = f"<code>{escaped_query}</code> = <b>{escaped_result}</b>"

    result_article = InlineQueryResultArticle(
        id='1',
        title=f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result_text}",
        input_message_content=InputTextMessageContent(
            message_text=message_content,
            parse_mode=ParseMode.HTML
        ),
        description="–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞."
    )

    await query.answer([result_article], cache_time=30, is_personal=True)


# --- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ ---

async def main():
    bot = Bot(token=BOT_TOKEN)
    dp = Dispatcher()

    dp.inline_query.register(inline_handler)
    # –ö–æ–º–∞–Ω–¥—ã /start –∏ /help —Ç–µ–ø–µ—Ä—å –≤—ã–∑—ã–≤–∞—é—Ç –æ–¥–Ω—É –∏ —Ç—É –∂–µ —Ñ—É–Ω–∫—Ü–∏—é
    dp.message.register(send_start_and_help, CommandStart())
    dp.message.register(send_start_and_help, Command("help"))
    dp.message.register(send_help_en, Command("help_en"))
    dp.message.register(send_stats, Command("stats"))

    dp.message.register(handle_other_messages, F.text)

    await bot.delete_webhook(drop_pending_updates=True)

    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ...")
    await dp.start_polling(bot)


if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")